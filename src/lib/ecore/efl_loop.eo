class Efl.Loop (Eo.Base)
{
   [[The Efl Main Loop

   Efl main loop provide a clean and tiny event loop library with many modules to
   do lots of convenient things for a programmer, to save time and effort. It's
   small and lean, designed to work from embedded systems all the way up to large
   and powerful multi-cpu workstations. The main loop has a number of primitives to
   be used with its main loop. It serializes all the primitives and allows for
   great responsiveness without the need for threads (or any other concurrency), but
   provide them if you need to.
   ]]
   methods {
      iterate {
         [[Runs a single iteration of the main loop to process everything on the
         queue.]]
      }
      iterate_may_block {
      	 [[Runs a single iteration of the main loop to process everything on the
      	 queue with block/non-blocking status.]]
         return: int;
         params {
            may_block: int; [[A flag if the main loop has a possibility of blocking.]]
         }
      }
      begin {
         [[Runs the application main loop.]]
      }
      quit {
         [[Quits the main loop once all the events currently on the queue have
         been processed.]]
      }
      job {
         [[Will execute that promise in the near future.]]
         params {
            @inout promise: promise<void*>*; [[The promise that will be triggered.]]
	    @in data: const(void)* @optional; [[The data to be given when the promise is done.]]
	 }
      }
      timeout {
         [[Will trigger this promise when the specified timeout occur.]]
	 params {
            @inout promise: promise<void*>*; [[The promise that will be triggered.]]
	    @in time: double; [[The time from now in second that the main loop will wait before triggering it.]]
	    @in data: const(void)* @optional; [[The data to be given when the promise is done.]]
	 }
      }
   }
   events {
      idle,enter @restart; [[Event occurs once the main loop enters the idle state.]]
      idle,exit @restart; [[Event occurs once the main loop exits the idle state.]]
      idle @restart; [[Event occurs once the main loop is idler. Be carefull, this will spin your CPU high if you keep listening on this event.]]
      /* TODO: All of the legacy ecore events. (Ecore.h header) */
   }
   implements {
      Eo.Base.constructor;
      Eo.Base.provider_find;
   }
}
